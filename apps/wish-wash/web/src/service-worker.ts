/// <reference lib="webworker" />
/* eslint-disable no-restricted-globals */

// This service worker can be customized!
// See https://developers.google.com/web/tools/workbox/modules
// for the list of available Workbox modules, or add any other
// code you'd like.
// You can also remove this file if you'd prefer not to use a
// service worker, and the Workbox build step will be skipped.

import { ExpirationPlugin } from 'workbox-expiration';
import {
  precacheAndRoute,
  createHandlerBoundToURL,
  cleanupOutdatedCaches,
} from 'workbox-precaching';
import { NavigationRoute, registerRoute } from 'workbox-routing';
import { StaleWhileRevalidate } from 'workbox-strategies';
import { listenForShare } from '@biscuits/client/serviceWorkers';
import { ClientDescriptor } from '@wish-wash.biscuits/verdant';

declare const self: ServiceWorkerGlobalScope;

// auto-update on ready
// self.skipWaiting();
// clientsClaim();

cleanupOutdatedCaches();

// Precache all of the assets generated by your build process.
// Their URLs are injected into the manifest variable below.
// This variable must be present somewhere in your service worker file,
// even if you decide not to use precaching. See https://cra.link/PWA
precacheAndRoute(self.__WB_MANIFEST);

registerRoute(new NavigationRoute(createHandlerBoundToURL('/index.html')));

// An example runtime caching route for requests that aren't handled by the
// precache, in this case same-origin .png requests like those from in public/
registerRoute(
  // Add in any other file extensions or routing criteria as needed.
  ({ url }) =>
    url.origin === self.location.origin && url.pathname.endsWith('.png'),
  // Customize this strategy as needed, e.g., by changing to CacheFirst.
  new StaleWhileRevalidate({
    cacheName: 'images',
    plugins: [
      // Ensure that once this runtime cache reaches a maximum size the
      // least-recently used images are removed.
      new ExpirationPlugin({ maxEntries: 50 }),
    ],
  }),
);

// This allows the web app to trigger skipWaiting via
// registration.waiting.postMessage({type: 'SKIP_WAITING'})
self.addEventListener('message', (event) => {
  if (event.data && event.data.type === 'SKIP_WAITING') {
    console.log('Skip waiting');
    self.skipWaiting();
  }
});

listenForShare();

self.addEventListener('periodicsync', (event: any) => {
  if (event.tag === 'expiration-sync') {
    event.waitUntil(checkExpirations());
  }
  // Other logic for different tags as needed.
});

async function checkExpirations() {
  const clientDescriptor = new ClientDescriptor({
    namespace: 'wish-wash',
    log: console.debug,
  });
  const client = await clientDescriptor.open();
  const today = new Date();
  today.setHours(0, 0, 0, 0);
  const tomorrow = new Date(today);
  tomorrow.setDate(tomorrow.getDate() + 1);

  const lists = await client.lists.findAll().resolved;

  const expiredItems = lists.flatMap((list) =>
    list.get('items').filter((item) => {
      const expiration = item.get('expiresAt');
      if (!expiration) {
        return false;
      }
      const expirationDate = new Date(expiration);
      return expirationDate < today;
    }),
  );
  const filteredItems = expiredItems.filter(
    (item) => !item.get('expirationNotificationSent'),
  );

  // issue a push notification for expired items
  // and mark them as notified

  if (filteredItems.length === 1) {
    // simpler notification which shows item description, too
    const item = filteredItems[0];
    const description = item.get('description');
    const createdAt = item.get('createdAt');
    const lifetime = (today.getTime() - createdAt) / (1000 * 60 * 60 * 24);

    const message = `"${description}" has been on your list for ${lifetime} days. Do you still want it? Open Wish Wash to manage old items.`;

    self.registration.showNotification('Old items on your list', {
      body: message,
      icon: '/favicon.ico',
      silent: true,
    });
  } else {
    // get the newest item and count of items for the message.
    const newestItem = filteredItems.reduce((newest, item) => {
      if (item.get('createdAt') > newest.get('createdAt')) {
        return item;
      }
      return newest;
    });
    const count = filteredItems.length;
    const createdAt = newestItem.get('createdAt');
    const lifetime = (today.getTime() - createdAt) / (1000 * 60 * 60 * 24);
    const message = `${count} items have been on your list for over ${lifetime} days. Do you still want them? Open Wish Wash to manage old items.`;

    self.registration.showNotification('Old items on your list', {
      body: message,
      icon: '/favicon.ico',
      silent: true,
    });
  }

  // clean up notifications
  for (const item of filteredItems) {
    item.set('expirationNotificationSent', true);
  }
}
